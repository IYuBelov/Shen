# -*- coding: utf-8 -*-


# –ó–∞–¥–∞—á–∏ –±–µ–∑ –º–∞—Å—Å–∏–≤–æ–≤


# 1.1.1 –î–∞–Ω—ã –¥–≤–µ —Ü–µ–ª—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ a, b. –°–æ—Å—Ç–∞–≤—å—Ç–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã, –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–º–µ–Ω—è–ª–∏—Å—å
# –±—ã –º–µ—Å—Ç–∞–º–∏ (–Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ a —Ä–∞–≤–Ω–æ —Å—Ç–∞—Ä–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é b –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç).
def swap(a, b):
    t = a
    a = b
    b = t
    return a, b

# –†–µ—à–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö
# –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (–∏ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ —Ü–µ–ª—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–æ–≥—É—Ç
# –±—ã—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞)
def swap_numbers(a, b):
    a = a + b
    b = a - b
    a = a - b
    return a, b


# 1.1.3. –î–∞–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –∞ –∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ (—Ü–µ–ª–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ)
# —á–∏—Å–ª–æ n. –í—ã—á–∏—Å–ª–∏—Ç–µ a ^ n
# –î—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, –ø—Ä–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–π –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∞ –∏ n –Ω–µ –º–µ–Ω—è—é—Ç—Å—è, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–π –¥—Ä—É–≥–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, b) —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è
# —Ä–∞–≤–Ω—ã–º a ^ n. (–ü—Ä–∏ —ç—Ç–æ–º —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏ –¥—Ä—É–≥–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.)
def pow(a, n):
    b = 1
    while n > 0:
        b *= a
        n -= 1
    return b

# 1.1.4. –†–µ—à–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è, —á—Ç–æ–±—ã —á–∏—Å–ª–æ
# –¥–µ–π—Å—Ç–≤–∏–π (–≤—ã–ø–æ–ª–Ω—è–µ–º—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è) –±—ã–ª–æ –ø–æ—Ä—è–¥–∫–∞ log n
# (—Ç–æ –µ—Å—Ç—å –Ω–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏–ª–æ –±—ã ùê∂ log n –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä–æ–π –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ùê∂; log n |
# —ç—Ç–æ —Å—Ç–µ–ø–µ–Ω—å, –≤ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –≤–æ–∑–≤–µ—Å—Ç–∏ 2, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å n).
def super_pow(a, n):
    b = 1
    c = a
    k = n
    while k > 0:
        if k % 2 == 0:
            k = k // 2
            c = c * c
        else:
            k -= 1
            b *= c
    return b

# 1.1.5. –î–∞–Ω—ã –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –∞, b. –í—ã—á–∏—Å–ª–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ a ¬∑ b,
# –∏—Å–ø–æ–ª—å–∑—É—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–∏—à—å –æ–ø–µ—Ä–∞—Ü–∏–∏ +, -, =, <>.
def multiply(a, b):
    result = 0
    while b > 0:
        result += a
        b -= 1

    return result

# 1.1.6. –î–∞–Ω—ã –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –∞ –∏ b. –í—ã—á–∏—Å–ª–∏—Ç–µ –∏—Ö —Å—É–º–º—É –∞ + b.
# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è –ª–∏—à—å –≤–∏–¥–∞
#      ‚ü®–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è1‚ü© := ‚ü®–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è2‚ü©,
#      ‚ü®–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è‚ü© := ‚ü®—á–∏—Å–ª–æ‚ü©,
#      ‚ü®–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è1‚ü© := ‚ü®–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è2‚ü© + 1.
# –†–µ—à–µ–Ω–∏–µ.
# ...
# {–∏–Ω–≤–∞—Ä–∏–∞–Ω—Ç: c = a + k}

def specialMultiply(a, b):
    k = 0
    result = 0
    while k != b:
        k += 1
        result += a
    return result

# 1.1.7. –î–∞–Ω–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ (—Ü–µ–ª–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ) —á–∏—Å–ª–æ –∞ –∏ —Ü–µ–ª–æ–µ
# –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ d. –í—ã—á–∏—Å–ª–∏—Ç–µ —á–∞—Å—Ç–Ω–æ–µ q –∏ –æ—Å—Ç–∞—Ç–æ–∫ r –ø—Ä–∏ –¥–µ–ª–µ–Ω–∏–∏ –∞
# –Ω–∞ d, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—è –æ–ø–µ—Ä–∞—Ü–∏–π div –∏ mod.
def div(a, d):
    assert d > 0, "d must by greater then 0"
    assert a >= 0, "d must by greater or equal by 0"

    q = r = 0
    while a >= d:
        q += 1
        a = r = a - d

    return q, r


# 1.1.8. –î–∞–Ω–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ n, –≤—ã—á–∏—Å–ª–∏—Ç–µ n! (0! = 1, n! = n ¬∑ (n ‚àí 1)!).
def factorial(n):
    assert n >= 0, "factorial must by >= 0"
    result = 1
    for k in range(1, n + 1):
        result *= k
    return result

# 1.1.9. –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –§–∏–±–æ–Ω–∞—á—á–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Ç–∞–∫: a0 = 0,
# a1 = 1, ak = ak-1 + ak-2 –ø—Ä–∏ k > 2. –î–∞–Ω–æ n, –≤—ã—á–∏—Å–ª–∏—Ç–µ an.
def fib(n):
    assert n >= 0, "n must be greater or equal 0"

    if n == 0:
        return 0

    if n == 1:
        return 1

    prev = 0
    result = 1
    for k in range(2, n + 1):
        prevPrev = prev
        prev = result
        result = prev + prevPrev

    return result


# 1.1.10. –¢–∞ –∂–µ –∑–∞–¥–∞—á–∞, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è, —á—Ç–æ–±—ã —á–∏—Å–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–π –±—ã–ª–æ
# –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ log n. (–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–º–∏.)
# [–£–∫–∞–∑–∞–Ω–∏–µ. –ü–∞—Ä–∞ —Å–æ—Å–µ–¥–Ω–∏—Ö —á–∏—Å–µ–ª –§–∏–±–æ–Ω–∞—á—á–∏ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —É–º–Ω–æ–∂–µ–Ω–∏–µ–º –Ω–∞ –º–∞—Ç—Ä–∏—Ü—É
#
# | —Ç–∞–∫ —á—Ç–æ –∑–∞–¥–∞—á–∞ —Å–≤–æ–¥–∏—Ç—Å—è –∫ –≤–æ–∑–≤–µ–¥–µ–Ω–∏—é –º–∞—Ç—Ä–∏—Ü—ã –≤ —Å—Ç–µ–ø–µ–Ω—å n. –≠—Ç–æ
# –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∑–∞ ùê∂ log n –¥–µ–π—Å—Ç–≤–∏–π —Ç–µ–º –∂–µ —Å–ø–æ—Å–æ–±–æ–º, —á—Ç–æ –∏ –¥–ª—è —á–∏—Å–µ–ª.]

class MatrixFibonacci:
    Q = [[1, 1],
         [1, 0]]

    def __init__(self):
        self.__memo = {}

    def __multiply_matrices(self, M1, M2):
        """–£–º–Ω–æ–∂–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü
        (–æ–∂–∏–¥–∞—é—Ç—Å—è –º–∞—Ç—Ä–∏—Ü—ã –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–º–µ—Ä–æ–º 2x2)."""

        a11 = M1[0][0]*M2[0][0] + M1[0][1]*M2[1][0]
        a12 = M1[0][0]*M2[0][1] + M1[0][1]*M2[1][1]
        a21 = M1[1][0]*M2[0][0] + M1[1][1]*M2[1][0]
        a22 = M1[1][0]*M2[0][1] + M1[1][1]*M2[1][1]
        r = [[a11, a12], [a21, a22]]
        return r

    def __get_matrix_power(self, M, p):
        """–í–æ–∑–≤–µ–¥–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –≤ —Å—Ç–µ–ø–µ–Ω—å (–æ–∂–∏–¥–∞–µ—Ç—Å—è p —Ä–∞–≤–Ω–∞—è —Å—Ç–µ–ø–µ–Ω–∏ –¥–≤–æ–π–∫–∏)."""

        if p == 1:
            return M
        if p in self.__memo:
            return self.__memo[p]
        K = self.__get_matrix_power(M, int(p/2))
        R = self.__multiply_matrices(K, K)
        self.__memo[p] = R
        return R

    def get_number(self, n):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ n-–≥–æ —á–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏
        (–≤ –∫–∞—á–µ—Å—Ç–≤–µ n –æ–∂–∏–¥–∞–µ—Ç—Å—è –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)."""
        if n == 0:
            return 0
        if n == 1:
            return 1
        # –†–∞–∑–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å—Ç–µ–ø–µ–Ω–∏ –Ω–∞ —Å—Ç–µ–ø–µ–Ω–∏, —Ä–∞–≤–Ω—ã–µ —Å—Ç–µ–ø–µ–Ω–∏ –¥–≤–æ–π–∫–∏,
        # —Ç.–µ. 62 = 2^5 + 2^4 + 2^3 + 2^2 + 2^0 = 32 + 16 + 8 + 4 + 1.
        powers = [int(pow(2, b))
                  for (b, d) in enumerate(reversed(bin(n-1)[2:])) if d == '1']
        # –¢–æ–∂–µ —Å–∞–º–æ–µ, –Ω–æ –º–µ–Ω–µ–µ pythonic: http://pastebin.com/h8cKDkHX

        matrices = [self.__get_matrix_power(MatrixFibonacci.Q, p)
                    for p in powers]
        while len(matrices) > 1:
            M1 = matrices.pop()
            M2 = matrices.pop()
            R = self.__multiply_matrices(M1, M2)
            matrices.append(R)
        return matrices[0][0][0]


def fibMatrix(n):
    assert n >= 0, "n must be greater or equal 0"
    return MatrixFibonacci().get_number(n)


# 1.1.11. –î–∞–Ω–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ n, –≤—ã—á–∏—Å–ª–∏—Ç–µ 1/ 1! + 1/2! + 1/3!
def calculateRange(n):
    assert n >= 0, "n must be greater or equal 0"
    result = 0
    for i in range(n + 1):
        result += 1.0 / factorial(i)
    return result


# 1.1.12. –¢–æ –∂–µ, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è, —á—Ç–æ–±—ã –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π (–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è
# ) –±—ã–ª–æ –±—ã –ø–æ—Ä—è–¥–∫–∞ n (–Ω–µ –±–æ–ª–µ–µ ùê∂n –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä–æ–π –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ùê∂).
def fastCalculateRange(n):
    assert n >= 0, "n must be greater or equal 0"
    result = 1
    prevFactorial = 1
    for i in range(1, n + 1):
        factorial = prevFactorial * i
        result += 1.0/factorial
        prevFactorial = factorial

    return result

# 1.1.13. –î–∞–Ω—ã –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ a –∏ b, –Ω–µ —Ä–∞–≤–Ω—ã–µ –Ω—É–ª—é –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ. –í—ã—á–∏—Å–ª–∏—Ç–µ –ù–û–î(a,b)
# –Ω–∞–∏–±–æ–ª—å—à–∏–π –æ–±—â–∏–π –¥–µ–ª–∏—Ç–µ–ª—å –∞ –∏ b
def nod1(a, b):
    assert not (a == 0 and b == 0), "a and b mustn't by zero!"
    if a == 0 or b == 0:
        return 0

    k = a if a < b else b
    result = 1
    while k > 0:
        if b % k == 0 and a % k == 0:
            result = k
            break
        k -= 1
    return result

# 1.1.14. –ù–∞–ø–∏—à–∏—Ç–µ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ï–≤–∫–ª–∏–¥–∞,
# –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –ù–û–î(a,b) = –ù–û–î(a mod b, b) –ø—Ä–∏ a > b,
# –ù–û–î(a,b) = –ù–û–î(a, b mod a) –ø—Ä–∏ b > a.

def nod2(a, b):
    """–ê–ª–≥–æ—Ä–∏—Ç–º –ï–≤–∫–ª–∏–¥–∞ gcd"""
    while b:
        a, b = b, a % b
    return abs(a)


# 1.1.15. –î–∞–Ω—ã –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ a –∏ b, –Ω–µ —Ä–∞–≤–Ω—ã–µ 0 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ. –ù–∞–π–¥–∏—Ç–µ
# d = –ù–û–î(a,b) –∏ —Ç–∞–∫–∏–µ —Ü–µ–ª—ã–µ x –∏ y, —á—Ç–æ d = a ¬∑ x + b ¬∑ y.
