# -*- coding: utf-8 -*-


# –ó–∞–¥–∞—á–∏ –±–µ–∑ –º–∞—Å—Å–∏–≤–æ–≤


# 1.1.1 –î–∞–Ω—ã –¥–≤–µ —Ü–µ–ª—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ a, b. –°–æ—Å—Ç–∞–≤—å—Ç–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã, –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–º–µ–Ω—è–ª–∏—Å—å
# –±—ã –º–µ—Å—Ç–∞–º–∏ (–Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ a —Ä–∞–≤–Ω–æ —Å—Ç–∞—Ä–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é b –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç).
def swap(a, b):
    t = a
    a = b
    b = t
    return a, b

# –†–µ—à–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö
# –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (–∏ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ —Ü–µ–ª—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–æ–≥—É—Ç
# –±—ã—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞)
def swap_numbers(a, b):
    a = a + b
    b = a - b
    a = a - b
    return a, b


# 1.1.3. –î–∞–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –∞ –∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ (—Ü–µ–ª–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ)
# —á–∏—Å–ª–æ n. –í—ã—á–∏—Å–ª–∏—Ç–µ a ^ n
# –î—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, –ø—Ä–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–π –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∞ –∏ n –Ω–µ –º–µ–Ω—è—é—Ç—Å—è, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–π –¥—Ä—É–≥–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, b) —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è
# —Ä–∞–≤–Ω—ã–º a ^ n. (–ü—Ä–∏ —ç—Ç–æ–º —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏ –¥—Ä—É–≥–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.)
def pow(a, n):
    b = 1
    while n > 0:
        b *= a
        n -= 1
    return b

# 1.1.4. –†–µ—à–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è, —á—Ç–æ–±—ã —á–∏—Å–ª–æ
# –¥–µ–π—Å—Ç–≤–∏–π (–≤—ã–ø–æ–ª–Ω—è–µ–º—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è) –±—ã–ª–æ –ø–æ—Ä—è–¥–∫–∞ log n
# (—Ç–æ –µ—Å—Ç—å –Ω–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏–ª–æ –±—ã ùê∂ log n –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä–æ–π –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ùê∂; log n |
# —ç—Ç–æ —Å—Ç–µ–ø–µ–Ω—å, –≤ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –≤–æ–∑–≤–µ—Å—Ç–∏ 2, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å n).
def super_pow(a, n):
    b = 1
    c = a
    k = n
    while k > 0:
        if k % 2 == 0:
            k = k // 2
            c = c * c
        else:
            k -= 1
            b *= c
    return b

# 1.1.5. –î–∞–Ω—ã –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –∞, b. –í—ã—á–∏—Å–ª–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ a ¬∑ b,
# –∏—Å–ø–æ–ª—å–∑—É—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–∏—à—å –æ–ø–µ—Ä–∞—Ü–∏–∏ +, -, =, <>.
def multiply(a, b):
    result = 0
    while b > 0:
        result += a
        b -= 1

    return result

# 1.1.6. –î–∞–Ω—ã –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –∞ –∏ b. –í—ã—á–∏—Å–ª–∏—Ç–µ –∏—Ö —Å—É–º–º—É –∞ + b.
# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è –ª–∏—à—å –≤–∏–¥–∞
#      ‚ü®–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è1‚ü© := ‚ü®–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è2‚ü©,
#      ‚ü®–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è‚ü© := ‚ü®—á–∏—Å–ª–æ‚ü©,
#      ‚ü®–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è1‚ü© := ‚ü®–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è2‚ü© + 1.
# –†–µ—à–µ–Ω–∏–µ.
# ...
# {–∏–Ω–≤–∞—Ä–∏–∞–Ω—Ç: c = a + k}

def specialMultiply(a, b):
    k = 0
    result = 0
    while k != b:
        k += 1
        result += a
    return result

# 1.1.7. –î–∞–Ω–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ (—Ü–µ–ª–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ) —á–∏—Å–ª–æ –∞ –∏ —Ü–µ–ª–æ–µ
# –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ d. –í—ã—á–∏—Å–ª–∏—Ç–µ —á–∞—Å—Ç–Ω–æ–µ q –∏ –æ—Å—Ç–∞—Ç–æ–∫ r –ø—Ä–∏ –¥–µ–ª–µ–Ω–∏–∏ –∞
# –Ω–∞ d, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—è –æ–ø–µ—Ä–∞—Ü–∏–π div –∏ mod.
def div(a, d):
    assert d > 0, "d must by greater then 0"
    assert a >= 0, "d must by greater or equal by 0"

    q = r = 0
    while a >= d:
        q += 1
        a = r = a - d

    return q, r


# 1.1.8. –î–∞–Ω–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ n, –≤—ã—á–∏—Å–ª–∏—Ç–µ n! (0! = 1, n! = n ¬∑ (n ‚àí 1)!).
def factorial(n):
    assert n >= 0, "factorial must by >= 0"
    result = 1
    for k in range(1, n + 1):
        result *= k
    return result

# 1.1.9. –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –§–∏–±–æ–Ω–∞—á—á–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Ç–∞–∫: a0 = 0,
# a1 = 1, ak = ak-1 + ak-2 –ø—Ä–∏ k > 2. –î–∞–Ω–æ n, –≤—ã—á–∏—Å–ª–∏—Ç–µ an.
def fib(n):
    assert n >= 0, "n must be greater or equal 0"

    if n == 0:
        return 0

    if n == 1:
        return 1

    prev = 0
    result = 1
    for k in range(2, n + 1):
        prevPrev = prev
        prev = result
        result = prev + prevPrev

    return result